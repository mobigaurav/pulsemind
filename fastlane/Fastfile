default_platform(:ios)

platform :ios do
  MAIN_APP_ID   = "com.playingview.mobigaurav.MindPulse"
  WATCH_APP_ID  = "com.playingview.mobigaurav.MindPulse.watchkitapp"

  def provisioning_profiles
    {
      MAIN_APP_ID  => "match AppStore #{MAIN_APP_ID}",
      WATCH_APP_ID => "match AppStore #{WATCH_APP_ID}"
    }
  end

  def appstore_api_key
    {
      key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_ISSUER_ID'],
      key: ENV['APP_STORE_CONNECT_API_KEY'],
      in_house: false
    }
  end

  desc "Build and archive the app"
  lane :build do
    match(
      type: "appstore",
      app_identifier: [MAIN_APP_ID, WATCH_APP_ID],
      api_key: appstore_api_key
    )

    increment_build_number(xcodeproj: "MindPulse.xcodeproj")

    build_app(
      scheme: "MindPulse",
      export_method: "app-store",
      clean: true,
      export_options: {
        provisioningProfiles: provisioning_profiles
      }
    )
  end

  desc "Distribute to TestFlight"
  lane :beta do
    match(
      type: "appstore",
      app_identifier: [MAIN_APP_ID, WATCH_APP_ID],
      api_key: appstore_api_key
    )

    increment_build_number(xcodeproj: "MindPulse.xcodeproj")

    build_app(
      scheme: "MindPulse",
      export_method: "app-store",
      clean: true,
      export_options: {
        provisioningProfiles: provisioning_profiles
      }
    )

    upload_to_testflight(
      api_key: appstore_api_key,
      skip_waiting_for_build_processing: true,
      notify_external_testers: false,
      changelog: "Automated CI/CD build ðŸš€"
    )

    create_git_tag
    push_git_tags
  end

  desc "Deploy to the App Store"
  lane :release do
    capture_screenshots # optional

    match(
      type: "appstore",
      app_identifier: [MAIN_APP_ID, WATCH_APP_ID],
      api_key: appstore_api_key
    )

    increment_build_number(xcodeproj: "MindPulse.xcodeproj")

    build_app(
      scheme: "MindPulse",
      export_method: "app-store",
      clean: true,
      export_options: {
        provisioningProfiles: provisioning_profiles
      }
    )

    upload_to_app_store(
      api_key: appstore_api_key,
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: false
    )

    create_git_tag
    push_git_tags
  end
end

# Helper lane for git tagging
lane :create_git_tag do
  version = get_version_number(xcodeproj: "MindPulse.xcodeproj")
  build = get_build_number(xcodeproj: "MindPulse.xcodeproj")
  tag = "v#{version}.#{build}"

  sh("git tag #{tag}")
end
